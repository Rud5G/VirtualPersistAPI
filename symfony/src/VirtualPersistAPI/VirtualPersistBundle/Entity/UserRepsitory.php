<?php

namespace VirtualPersistAPI\VirtualPersistBundle\Entity;

use Doctrine\ORM\EntityRepository;
use VirtualPersistAPI\VirtualPersistBundle\Entity\User;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * UserRepsitory
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepsitory extends EntityRepository implements UserProviderInterface
{
    public function getAll()
    {
      try {
        $users = $this->_em
          ->createQuery('SELECT u FROM VirtualPersistBundle:User u')
          ->getResult();
        if (!empty($users)) {
          return $users;
        }
      } catch (\Exception $e) {
      }
      $user = new User();
      $user->setUuid('<none>');
      return array($user);
    }

    public function addUser(User $user) {
      $em = $this->_em;
      $conn = $em->getConnection();
      // Save the user inside a transaction.
      $conn->transactional(function($em, $user) {
        $em->persist($user);
        $em->flush();
      });
    }

    public function addUsers(array $users) {
      $em = $this->_em;
      $conn = $em->getConnection();
      // Transaction.
      $conn->transactional(function ($em, $users) {
        foreach($users as $user) {
          $this->addUser($user);
        }
      });
    }

    /**
     * It just so happens that loadUserByUsername() can
     * do this for us.
     */
    public function userForUUID($uuid)
    {
      return $this->loadUserByUsername($uuid);
    }

    public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.username = :username OR u.uuid = :uuid')
            ->setParameter('username', $username)
            ->setParameter('uuid', $username)
            ->getQuery()
        ;

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find "%s".',
                $username
            );
            throw new UsernameNotFoundException($message, null, 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());
    }

}
